"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MovementCommands = void 0;
const __1 = require("../..");
const MessageClasses_1 = require("../MessageClasses");
const CommandsBase_1 = require("./CommandsBase");
class MovementCommands extends CommandsBase_1.CommandsBase {
    sitOnObject(targetID, offset) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.requestSitOnObject(targetID, offset);
            yield this.sitOn();
        });
    }
    sitOnGround() {
        this.agent.setControlFlag(__1.ControlFlags.AGENT_CONTROL_SIT_ON_GROUND);
        this.agent.sendAgentUpdate();
    }
    stand() {
        this.agent.clearControlFlag(__1.ControlFlags.AGENT_CONTROL_SIT_ON_GROUND);
        this.agent.setControlFlag(__1.ControlFlags.AGENT_CONTROL_STAND_UP);
        this.agent.sendAgentUpdate();
        this.agent.clearControlFlag(__1.ControlFlags.AGENT_CONTROL_STAND_UP);
        this.agent.sendAgentUpdate();
    }
    requestSitOnObject(targetID, offset) {
        return __awaiter(this, void 0, void 0, function* () {
            const msg = new MessageClasses_1.AgentRequestSitMessage();
            msg.AgentData = {
                AgentID: this.agent.agentID,
                SessionID: this.circuit.sessionID,
            };
            msg.TargetObject = {
                TargetID: targetID,
                Offset: offset,
            };
            const seqID = this.circuit.sendMessage(msg, __1.PacketFlags.Reliable);
            return this.circuit.waitForAck(seqID, 10000);
        });
    }
    sitOn() {
        return __awaiter(this, void 0, void 0, function* () {
            const msg = new MessageClasses_1.AgentSitMessage();
            msg.AgentData = {
                AgentID: this.agent.agentID,
                SessionID: this.circuit.sessionID,
            };
            const seqID = this.circuit.sendMessage(msg, __1.PacketFlags.Reliable);
            return this.circuit.waitForAck(seqID, 10000);
        });
    }
}
exports.MovementCommands = MovementCommands;
//# sourceMappingURL=MovementCommands.js.map