"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentCommands = void 0;
const UUID_1 = require("../UUID");
const AgentAnimation_1 = require("../messages/AgentAnimation");
const PacketFlags_1 = require("../../enums/PacketFlags");
const CommandsBase_1 = require("./CommandsBase");
const Message_1 = require("../../enums/Message");
const Utils_1 = require("../Utils");
const FilterResponse_1 = require("../../enums/FilterResponse");
const AvatarPropertiesRequest_1 = require("../messages/AvatarPropertiesRequest");
class AgentCommands extends CommandsBase_1.CommandsBase {
    animate(anim, run) {
        return __awaiter(this, void 0, void 0, function* () {
            const circuit = this.currentRegion.circuit;
            const animPacket = new AgentAnimation_1.AgentAnimationMessage();
            animPacket.AgentData = {
                AgentID: this.agent.agentID,
                SessionID: circuit.sessionID
            };
            animPacket.PhysicalAvatarEventList = [];
            animPacket.AnimationList = [];
            for (const a of anim) {
                animPacket.AnimationList.push({
                    AnimID: a,
                    StartAnim: run
                });
            }
            return yield circuit.waitForAck(circuit.sendMessage(animPacket, PacketFlags_1.PacketFlags.Reliable), 10000);
        });
    }
    startAnimations(anim) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.animate(anim, true);
        });
    }
    stopAnimations(anim) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.animate(anim, false);
        });
    }
    setCamera(position, lookAt, viewDistance, leftAxis, upAxis) {
        this.agent.cameraCenter = position;
        this.agent.cameraLookAt = lookAt;
        if (viewDistance !== undefined) {
            this.agent.cameraFar = viewDistance;
        }
        if (leftAxis !== undefined) {
            this.agent.cameraLeftAxis = leftAxis;
        }
        if (upAxis !== undefined) {
            this.agent.cameraUpAxis = upAxis;
        }
        this.agent.sendAgentUpdate();
    }
    setViewDistance(viewDistance) {
        this.agent.cameraFar = viewDistance;
        this.agent.sendAgentUpdate();
    }
    getWearables() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.agent.getWearables();
        });
    }
    waitForAppearanceComplete(timeout = 30000) {
        return new Promise((resolve, reject) => {
            if (this.agent.appearanceComplete) {
                resolve();
            }
            else {
                let appearanceSubscription;
                let timeoutTimer;
                appearanceSubscription = this.agent.appearanceCompleteEvent.subscribe(() => {
                    if (timeoutTimer !== undefined) {
                        clearTimeout(timeoutTimer);
                        timeoutTimer = undefined;
                    }
                    if (appearanceSubscription !== undefined) {
                        appearanceSubscription.unsubscribe();
                        appearanceSubscription = undefined;
                        resolve();
                    }
                });
                timeoutTimer = setTimeout(() => {
                    if (appearanceSubscription !== undefined) {
                        appearanceSubscription.unsubscribe();
                        appearanceSubscription = undefined;
                    }
                    if (timeoutTimer !== undefined) {
                        clearTimeout(timeoutTimer);
                        timeoutTimer = undefined;
                        reject(new Error('Timeout'));
                    }
                }, timeout);
                if (this.agent.appearanceComplete) {
                    if (appearanceSubscription !== undefined) {
                        appearanceSubscription.unsubscribe();
                        appearanceSubscription = undefined;
                    }
                    if (timeoutTimer !== undefined) {
                        clearTimeout(timeoutTimer);
                        timeoutTimer = undefined;
                    }
                    resolve();
                }
            }
        });
    }
    getAvatar(avatarID = UUID_1.UUID.zero()) {
        if (typeof avatarID === 'string') {
            avatarID = new UUID_1.UUID(avatarID);
        }
        else if (avatarID.isZero()) {
            avatarID = this.agent.agentID;
        }
        return this.currentRegion.agents[avatarID.toString()];
    }
    getAvatarProperties(avatarID) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof avatarID === 'string') {
                avatarID = new UUID_1.UUID(avatarID);
            }
            const msg = new AvatarPropertiesRequest_1.AvatarPropertiesRequestMessage();
            msg.AgentData = {
                AgentID: this.agent.agentID,
                SessionID: this.circuit.sessionID,
                AvatarID: avatarID
            };
            this.circuit.sendMessage(msg, PacketFlags_1.PacketFlags.Reliable);
            const avatarPropertiesReply = (yield this.circuit.waitForMessage(Message_1.Message.AvatarPropertiesReply, 10000, (packet) => {
                const replyMessage = packet;
                if (replyMessage.AgentData.AvatarID.equals(avatarID)) {
                    return FilterResponse_1.FilterResponse.Finish;
                }
                return FilterResponse_1.FilterResponse.NoMatch;
            }));
            return new class {
                constructor() {
                    this.ImageID = avatarPropertiesReply.PropertiesData.ImageID;
                    this.FLImageID = avatarPropertiesReply.PropertiesData.FLImageID;
                    this.PartnerID = avatarPropertiesReply.PropertiesData.PartnerID;
                    this.AboutText = Utils_1.Utils.BufferToStringSimple(avatarPropertiesReply.PropertiesData.AboutText);
                    this.FLAboutText = Utils_1.Utils.BufferToStringSimple(avatarPropertiesReply.PropertiesData.FLAboutText);
                    this.BornOn = Utils_1.Utils.BufferToStringSimple(avatarPropertiesReply.PropertiesData.BornOn);
                    this.ProfileURL = Utils_1.Utils.BufferToStringSimple(avatarPropertiesReply.PropertiesData.ProfileURL);
                    this.CharterMember = parseInt(Utils_1.Utils.BufferToStringSimple(avatarPropertiesReply.PropertiesData.CharterMember), 10); // avatarPropertiesReply.PropertiesData.CharterMember;
                    this.Flags = avatarPropertiesReply.PropertiesData.Flags;
                }
            };
        });
    }
}
exports.AgentCommands = AgentCommands;
//# sourceMappingURL=AgentCommands.js.map