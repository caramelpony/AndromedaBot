/// <reference types="node" />
import { AssetType } from '../enums/AssetType';
import { FolderType } from '../enums/FolderType';
import { InventoryItemFlags } from '../enums/InventoryItemFlags';
import { InventoryLibrary } from '../enums/InventoryLibrary';
import { InventoryType } from '../enums/InventoryType';
import { Agent } from './Agent';
import { InventoryItem } from './InventoryItem';
import { UUID } from './UUID';
export declare class InventoryFolder {
    typeDefault: FolderType;
    version: number;
    name: string;
    folderID: UUID;
    parentID: UUID;
    items: InventoryItem[];
    folders: InventoryFolder[];
    cacheDir: string;
    agent: Agent;
    library: InventoryLibrary;
    private callbackID;
    private inventoryBase;
    constructor(lib: InventoryLibrary, invBase: {
        skeleton: {
            [key: string]: InventoryFolder;
        };
        root?: UUID;
    }, agent: Agent);
    getChildFolders(): InventoryFolder[];
    getChildFoldersRecursive(): InventoryFolder[];
    createFolder(name: string, type: FolderType): Promise<InventoryFolder>;
    delete(saveCache?: boolean): Promise<void>;
    private saveCache;
    private loadCache;
    removeItem(itemID: UUID, save?: boolean): Promise<void>;
    addItem(item: InventoryItem, save?: boolean): Promise<void>;
    private populateInternal;
    populate(useCached?: boolean): Promise<void>;
    private uploadInventoryAssetLegacy;
    private uploadInventoryItem;
    uploadAsset(type: AssetType, inventoryType: InventoryType, data: Buffer, name: string, description: string, flags?: InventoryItemFlags): Promise<InventoryItem>;
    checkCopyright(creatorID: UUID): void;
    findFolder(id: UUID): InventoryFolder | null;
    uploadMesh(name: string, description: string, mesh: Buffer, confirmCostCallback: (cost: number) => Promise<boolean>): Promise<InventoryItem>;
}
