import { Circuit } from './Circuit';
import { Agent } from './Agent';
import { Caps } from './Caps';
import { Comms } from './Comms';
import { ClientEvents } from './ClientEvents';
import { IObjectStore } from './interfaces/IObjectStore';
import { RegionHandshakeMessage } from './messages/RegionHandshake';
import * as Long from 'long';
import { Subscription } from 'rxjs';
import { Subject } from 'rxjs';
import { Parcel } from './public/Parcel';
import { RegionEnvironment } from './public/RegionEnvironment';
import { ClientCommands } from './ClientCommands';
import { ILandBlock } from './interfaces/ILandBlock';
import { UUID } from './UUID';
import { RegionFlags } from '../enums/RegionFlags';
import { BotOptionFlags } from '../enums/BotOptionFlags';
import { ObjectResolver } from './ObjectResolver';
import { Avatar } from './public/Avatar';
export declare class Region {
    static CopyMatrix16: number[];
    static CosineTable16: number[];
    static DequantizeTable16: number[];
    static setup: boolean;
    static OO_SQRT_2: number;
    regionName: string;
    regionOwner: UUID;
    regionID: UUID;
    regionSizeX: number;
    regionSizeY: number;
    regionHandle: Long;
    xCoordinate: number;
    yCoordinate: number;
    estateID: number;
    parentEstateID: number;
    regionFlags: RegionFlags;
    mapImage: UUID;
    simAccess: number;
    maxAgents: number;
    billableFactor: number;
    objectBonusFactor: number;
    waterHeight: number;
    terrainRaiseLimit: number;
    terrainLowerLimit: number;
    pricePerMeter: number;
    redirectGridX: number;
    redirectGridY: number;
    useEstateSun: boolean;
    sunHour: number;
    productSKU: string;
    productName: string;
    maxAgents32: number;
    hardMaxAgents: number;
    hardMaxObjects: number;
    cacheID: UUID;
    cpuClassID: number;
    cpuRatio: number;
    coloName: string;
    terrainBase0: UUID;
    terrainBase1: UUID;
    terrainBase2: UUID;
    terrainBase3: UUID;
    terrainDetail0: UUID;
    terrainDetail1: UUID;
    terrainDetail2: UUID;
    terrainDetail3: UUID;
    terrainStartHeight00: number;
    terrainStartHeight01: number;
    terrainStartHeight10: number;
    terrainStartHeight11: number;
    terrainHeightRange00: number;
    terrainHeightRange01: number;
    terrainHeightRange10: number;
    terrainHeightRange11: number;
    handshakeComplete: boolean;
    handshakeCompleteEvent: Subject<void>;
    circuit: Circuit;
    objects: IObjectStore;
    caps: Caps;
    comms: Comms;
    clientEvents: ClientEvents;
    clientCommands: ClientCommands;
    options: BotOptionFlags;
    agent: Agent;
    messageSubscription: Subscription;
    parcelPropertiesSubscription: Subscription;
    terrain: number[][];
    tilesReceived: number;
    terrainComplete: boolean;
    terrainCompleteEvent: Subject<void>;
    parcelsComplete: boolean;
    parcelsCompleteEvent: Subject<void>;
    parcelOverlayComplete: boolean;
    parcelOverlayCompleteEvent: Subject<void>;
    parcelOverlay: ILandBlock[];
    parcels: {
        [key: number]: Parcel;
    };
    parcelsByUUID: {
        [key: string]: Parcel;
    };
    parcelMap: number[][];
    parcelCoordinates: {
        x: number;
        y: number;
    }[];
    environment: RegionEnvironment;
    timeOffset: number;
    resolver: ObjectResolver;
    agents: {
        [key: string]: Avatar;
    };
    private parcelOverlayReceived;
    static IDCTColumn16(linein: number[], lineout: number[], column: number): void;
    static IDCTLine16(linein: number[], lineout: number[], line: number): void;
    static InitialSetup(): void;
    private static doesBitmapContainCoordinate;
    constructor(agent: Agent, clientEvents: ClientEvents, options: BotOptionFlags);
    private resolveParcel;
    private fillParcel;
    getParcelProperties(x: number, y: number): Promise<Parcel>;
    getParcels(): Promise<Parcel[]>;
    resetParcels(): void;
    waitForParcelOverlay(): Promise<void>;
    waitForParcels(): Promise<void>;
    waitForTerrain(): Promise<void>;
    getTerrainHeightAtPoint(x: number, y: number): number;
    exportXML(): string;
    activateCaps(seedURL: string): void;
    handshake(handshake: RegionHandshakeMessage): Promise<void>;
    shutdown(): void;
}
