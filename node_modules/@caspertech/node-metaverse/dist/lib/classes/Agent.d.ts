/// <reference types="node" />
import { UUID } from './UUID';
import { Vector3 } from './Vector3';
import { Inventory } from './Inventory';
import { Wearable } from './Wearable';
import { Region } from './Region';
import { Packet } from './Packet';
import { ClientEvents } from './ClientEvents';
import * as Long from 'long';
import { ControlFlags } from '../enums/ControlFlags';
import { Subject } from 'rxjs';
import { InventoryFolder } from './InventoryFolder';
import Timer = NodeJS.Timer;
export declare class Agent {
    firstName: string;
    lastName: string;
    localID: number;
    agentID: UUID;
    activeGroupID: UUID;
    accessMax: string;
    regionAccess: string;
    agentAccess: string;
    currentRegion: Region;
    chatSessions: Map<string, {
        agents: Map<string, {
            hasVoice: boolean;
            isModerator: boolean;
        }>;
        timeout?: Timer | undefined;
    }>;
    controlFlags: ControlFlags;
    openID: {
        'token'?: string;
        'url'?: string;
    };
    AOTransition: boolean;
    buddyList: {
        'buddyRightsGiven': boolean;
        'buddyID': UUID;
        'buddyRightsHas': boolean;
    }[];
    uiFlags: {
        'allowFirstLife'?: boolean;
    };
    cameraLookAt: Vector3;
    cameraCenter: Vector3;
    cameraLeftAxis: Vector3;
    cameraUpAxis: Vector3;
    cameraFar: number;
    maxGroups: number;
    agentFlags: number;
    startLocation: string;
    cofVersion: number;
    home: {
        'regionHandle'?: Long;
        'position'?: Vector3;
        'lookAt'?: Vector3;
    };
    snapshotConfigURL: string;
    inventory: Inventory;
    gestures: {
        assetID: UUID;
        itemID: UUID;
    }[];
    agentAppearanceService: string;
    wearables?: {
        attachments: Wearable[];
        serialNumber: number;
    };
    agentUpdateTimer: Timer | null;
    estateManager: boolean;
    appearanceComplete: boolean;
    appearanceCompleteEvent: Subject<void>;
    private clientEvents;
    private animSubscription?;
    onGroupChatExpired: Subject<UUID>;
    constructor(clientEvents: ClientEvents);
    updateLastMessage(groupID: UUID): void;
    setIsEstateManager(is: boolean): void;
    getSessionAgentCount(uuid: UUID): number;
    addChatSession(uuid: UUID, timeout: boolean): boolean;
    private groupChatExpired;
    hasChatSession(uuid: UUID): boolean;
    deleteChatSession(uuid: UUID): boolean;
    setCurrentRegion(region: Region): void;
    circuitActive(): void;
    sendAgentUpdate(): void;
    shutdown(): void;
    onMessage(packet: Packet): void;
    getWearables(): Promise<InventoryFolder>;
    setInitialAppearance(): Promise<void>;
    setControlFlag(flag: ControlFlags): void;
    clearControlFlag(flag: ControlFlags): void;
}
