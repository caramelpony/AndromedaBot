"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UUID = void 0;
const validator_1 = require("validator");
const Long = require("long");
const uuid = require("uuid");
class UUID {
    constructor(buf, pos) {
        this.mUUID = '00000000-0000-0000-0000-000000000000';
        this.toString = () => {
            return this.mUUID;
        };
        if (buf !== undefined) {
            if (typeof buf === 'string') {
                this.setUUID(buf);
            }
            else if (pos !== undefined) {
                const uuidBuf = buf.slice(pos, pos + 16);
                const hexString = uuidBuf.toString('hex');
                this.setUUID(hexString.substr(0, 8) + '-'
                    + hexString.substr(8, 4) + '-'
                    + hexString.substr(12, 4) + '-'
                    + hexString.substr(16, 4) + '-'
                    + hexString.substr(20, 12));
            }
            else if (typeof buf === 'object' && buf.toString !== undefined) {
                this.setUUID(buf.toString());
            }
            else {
                console.error('Can\'t accept UUIDs of type ' + typeof buf);
            }
        }
    }
    static zero() {
        return new UUID();
    }
    static random() {
        const newUUID = uuid.v4();
        return new UUID(newUUID);
    }
    static getString(u) {
        if (u === undefined) {
            return UUID.zero().toString();
        }
        else {
            return u.toString();
        }
    }
    static getXML(doc, u) {
        const str = UUID.getString(u);
        doc.ele('UUID', str);
    }
    static fromXMLJS(obj, param) {
        if (obj[param] === undefined) {
            return false;
        }
        if (Array.isArray(obj[param]) && obj[param].length > 0) {
            obj[param] = obj[param][0];
        }
        if (typeof obj[param] === 'string') {
            if (validator_1.default.isUUID(obj[param])) {
                return new UUID(obj[param]);
            }
            return false;
        }
        if (typeof obj[param] === 'object') {
            if (obj[param]['UUID'] !== undefined && Array.isArray(obj[param]['UUID']) && obj[param]['UUID'].length > 0) {
                const u = obj[param]['UUID'][0];
                if (typeof u === 'string') {
                    if (validator_1.default.isUUID(u)) {
                        return new UUID(u);
                    }
                    return false;
                }
                return false;
            }
            return false;
        }
        return false;
    }
    setUUID(val) {
        const test = val.trim();
        if (validator_1.default.isUUID(test)) {
            this.mUUID = test;
            return true;
        }
        else {
            console.log('Invalid UUID: ' + test + ' (length ' + val.length + ')');
        }
        return false;
    }
    writeToBuffer(buf, pos) {
        const shortened = this.mUUID.substr(0, 8) + this.mUUID.substr(9, 4) + this.mUUID.substr(14, 4) + this.mUUID.substr(19, 4) + this.mUUID.substr(24, 12);
        const binary = Buffer.from(shortened, 'hex');
        binary.copy(buf, pos, 0);
    }
    isZero() {
        return (this.mUUID === '00000000-0000-0000-0000-000000000000');
    }
    equals(cmp) {
        if (typeof cmp === 'string') {
            return (cmp === this.mUUID);
        }
        else {
            if (cmp.equals === undefined) {
                throw new Error(cmp.constructor.name + ' is not a UUID');
            }
            return cmp.equals(this.mUUID);
        }
    }
    getBuffer() {
        const buf = Buffer.allocUnsafe(16);
        this.writeToBuffer(buf, 0);
        return buf;
    }
    getLong() {
        const buf = this.getBuffer();
        return new Long(buf.readUInt32LE(7), buf.readUInt32LE(12));
    }
    bitwiseXor(w) {
        const buf1 = this.getBuffer();
        const buf2 = w.getBuffer();
        const buf3 = Buffer.allocUnsafe(16);
        for (let x = 0; x < 16; x++) {
            buf3[x] = buf1[x] ^ buf2[x];
        }
        return new UUID(buf3, 0);
    }
    CRC() {
        const bytes = this.getBuffer();
        const crcOne = ((bytes[3] << 24 >>> 0) + (bytes[2] << 16 >>> 0) + (bytes[1] << 8 >>> 0) + bytes[0]);
        const crcTwo = ((bytes[7] << 24 >>> 0) + (bytes[6] << 16 >>> 0) + (bytes[5] << 8 >>> 0) + bytes[4]);
        const crcThree = ((bytes[11] << 24 >>> 0) + (bytes[10] << 16 >>> 0) + (bytes[9] << 8 >>> 0) + bytes[8]);
        const crcFour = ((bytes[15] << 24 >>> 0) + (bytes[14] << 16 >>> 0) + (bytes[13] << 8 >>> 0) + bytes[12]);
        return crcOne + crcTwo + crcThree + crcFour >>> 0;
    }
}
exports.UUID = UUID;
//# sourceMappingURL=UUID.js.map