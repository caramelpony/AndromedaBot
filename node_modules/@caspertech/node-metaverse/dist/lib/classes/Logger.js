"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const logger = require("winston");
const winston = require("winston");
const moment = require("moment");
const chalk = require("chalk");
const formatLevel = function (text, level) {
    switch (level) {
        case 'warn':
            return chalk.yellowBright(text);
        case 'error':
            return chalk.redBright(text);
        case 'debug':
            return chalk.green(text);
        case 'info':
            return chalk.magentaBright(text);
        default:
            return text;
    }
};
const formatMessage = function (text, level) {
    switch (level) {
        case 'warn':
            return chalk.yellowBright(text);
        case 'error':
            return chalk.redBright(text);
        default:
            return text;
    }
};
const logFormat = winston.format.printf(function (info) {
    const logComponents = [
        moment().format('YYYY-MM-DD HH:mm:ss'),
        '-',
        '[' + formatLevel(info.level.toUpperCase(), info.level) + ']',
        formatMessage(info.message, info.level)
    ];
    return logComponents.join(' ');
});
logger.configure({
    format: logFormat,
    silent: false,
    transports: [
        new winston.transports.Console({
            'level': 'debug',
            handleExceptions: true
        })
    ],
});
class Logger {
    static increasePrefixLevel() {
        this.prefixLevel++;
        this.generatePrefix();
    }
    static decreasePrefixLevel() {
        this.prefixLevel--;
        this.generatePrefix();
    }
    static generatePrefix() {
        this.prefix = '';
        for (let x = 0; x < this.prefixLevel; x++) {
            this.prefix += '    ';
        }
        if (this.prefix.length > 0) {
            this.prefix += '... ';
        }
    }
    static Debug(message) {
        if (typeof message === 'string') {
            message = this.prefix + message;
        }
        this.Log('debug', message);
    }
    static Info(message) {
        if (typeof message === 'string') {
            message = this.prefix + message;
        }
        this.Log('info', message);
    }
    static Warn(message) {
        if (typeof message === 'string') {
            message = this.prefix + message;
        }
        this.Log('warn', message);
    }
    static Error(message) {
        if (typeof message !== 'object') {
            message = this.prefix + String(message);
        }
        this.Log('error', message);
    }
    static Log(type, message) {
        if (typeof message === 'object') {
            if (message instanceof Error) {
                message = message.message + '\n\n' + message.stack;
            }
            else {
                message = JSON.stringify(message);
            }
        }
        logger.log(type, message);
    }
}
exports.Logger = Logger;
Logger.prefixLevel = 0;
Logger.prefix = '';
//# sourceMappingURL=Logger.js.map