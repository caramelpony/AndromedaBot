"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Material = void 0;
const UUID_1 = require("../UUID");
const Color4_1 = require("../Color4");
const LLSD = require("@caspertech/llsd");
const Utils_1 = require("../Utils");
class Material {
    static fromLLSD(llsd) {
        const parsed = LLSD.LLSD.parseXML(llsd);
        return this.fromLLSDObject(parsed);
    }
    static fromLLSDObject(parsed) {
        const material = new Material();
        if (parsed['AlphaMaskCutoff'] !== undefined) {
            material.alphaMaskCutoff = parsed['AlphaMaskCutoff'];
        }
        if (parsed['DiffuseAlphaMode'] !== undefined) {
            material.diffuseAlphaMode = parsed['DiffuseAlphaMode'];
        }
        if (parsed['EnvIntensity'] !== undefined) {
            material.envIntensity = parsed['EnvIntensity'];
        }
        if (parsed['NormMap'] !== undefined) {
            material.normMap = new UUID_1.UUID(parsed['NormMap'].toString());
        }
        if (parsed['NormOffsetX'] !== undefined) {
            material.normOffsetX = parsed['NormOffsetX'];
        }
        if (parsed['NormOffsetY'] !== undefined) {
            material.normOffsetY = parsed['NormOffsetY'];
        }
        if (parsed['NormRepeatX'] !== undefined) {
            material.normRepeatX = parsed['NormRepeatX'];
        }
        if (parsed['NormRepeatY'] !== undefined) {
            material.normRepeatY = parsed['NormRepeatY'];
        }
        if (parsed['NormRotation'] !== undefined) {
            material.normRotation = parsed['NormRotation'];
        }
        if (parsed['SpecColor'] !== undefined && Array.isArray(parsed['SpecColor']) && parsed['SpecColor'].length > 3) {
            material.specColor = new Color4_1.Color4([
                parsed['SpecColor'][0],
                parsed['SpecColor'][1],
                parsed['SpecColor'][2],
                parsed['SpecColor'][3]
            ]);
        }
        if (parsed['SpecExp'] !== undefined) {
            material.specExp = parsed['SpecExp'];
        }
        if (parsed['SpecMap'] !== undefined) {
            material.specMap = new UUID_1.UUID(parsed['SpecMap'].toString());
        }
        if (parsed['SpecOffsetX'] !== undefined) {
            material.specOffsetX = parsed['SpecOffsetX'];
        }
        if (parsed['SpecOffsetY'] !== undefined) {
            material.specOffsetY = parsed['SpecOffsetY'];
        }
        if (parsed['SpecRepeatX'] !== undefined) {
            material.specRepeatX = parsed['SpecRepeatX'];
        }
        if (parsed['SpecRepeatY'] !== undefined) {
            material.specRepeatY = parsed['SpecRepeatY'];
        }
        if (parsed['SpecRotation'] !== undefined) {
            material.specRotation = parsed['SpecRotation'];
        }
        return material;
    }
    toLLSDObject() {
        return {
            'AlphaMaskCutoff': this.alphaMaskCutoff,
            'DiffuseAlphaMode': this.diffuseAlphaMode,
            'EnvIntensity': this.envIntensity,
            'NormMap': new LLSD.UUID(this.normMap.toString()),
            'NormOffsetX': this.normOffsetX,
            'NormOffsetY': this.normOffsetY,
            'NormRepeatX': this.normRepeatX,
            'NormRepeatY': this.normRepeatY,
            'NormRotation': this.normRotation,
            'SpecColor': [
                this.specColor.getRed(),
                this.specColor.getGreen(),
                this.specColor.getBlue(),
                this.specColor.getAlpha()
            ],
            'SpecExp': this.specExp,
            'SpecMap': new LLSD.UUID(this.specMap.toString()),
            'SpecOffsetX': this.specOffsetX,
            'SpecOffsetY': this.specOffsetY,
            'SpecRepeatX': this.specRepeatX,
            'SpecRepeatY': this.specRepeatY,
            'SpecRotation': this.specRotation,
        };
    }
    toLLSD() {
        return LLSD.LLSD.formatXML(this.toLLSDObject());
    }
    toAsset(uuid) {
        return __awaiter(this, void 0, void 0, function* () {
            const asset = {
                'ID': new LLSD.UUID(uuid.toString()),
                'Material': this.toLLSD()
            };
            const binary = LLSD.LLSD.formatBinary(asset);
            return yield Utils_1.Utils.deflate(Buffer.from(binary.toArray()));
        });
    }
}
exports.Material = Material;
//# sourceMappingURL=Material.js.map