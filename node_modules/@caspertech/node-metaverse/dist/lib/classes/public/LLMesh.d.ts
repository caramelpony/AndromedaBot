/// <reference types="node" />
import { UUID } from '../UUID';
import { LLSubMesh } from './interfaces/LLSubMesh';
import { Vector3 } from '../Vector3';
import { Vector2 } from '../Vector2';
import { LLSkin } from './interfaces/LLSkin';
import { LLPhysicsConvex } from './interfaces/LLPhysicsConvex';
export declare class LLMesh {
    version: number;
    lodLevels: {
        [key: string]: LLSubMesh[];
    };
    physicsConvex: LLPhysicsConvex;
    skin?: LLSkin;
    creatorID: UUID;
    date: Date;
    static from(buf: Buffer): Promise<LLMesh>;
    static parseSkin(mesh: any): LLSkin;
    static fixReal(arr: number[]): number[];
    static parsePhysicsConvex(mesh: any): LLPhysicsConvex;
    static parseLODLevel(mesh: any): LLSubMesh[];
    static decodeByteDomain3(posArray: number[], minDomain: Vector3, maxDomain: Vector3): Vector3[];
    static decodeByteDomain2(posArray: number[], minDomain: Vector2, maxDomain: Vector2): Vector2[];
    static normalizeDomain(value: number, min: number, max: number): number;
    private encodeSubMesh;
    private expandFromDomain;
    private encodeLODLevel;
    private encodePhysicsConvex;
    private encodeSkin;
    toAsset(): Promise<Buffer>;
}
