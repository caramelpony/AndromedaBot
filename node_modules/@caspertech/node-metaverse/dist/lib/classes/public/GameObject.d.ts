/// <reference types="node" />
import { Vector3 } from '../Vector3';
import { UUID } from '../UUID';
import { Quaternion } from '../Quaternion';
import { Tree } from '../../enums/Tree';
import { Vector4 } from '../Vector4';
import { TextureEntry } from '../TextureEntry';
import { Color4 } from '../Color4';
import { ParticleSystem } from '../ParticleSystem';
import { ITreeBoundingBox } from '../interfaces/ITreeBoundingBox';
import { NameValue } from '../NameValue';
import * as Long from 'long';
import { IGameObjectData } from '../interfaces/IGameObjectData';
import { XMLElement } from 'xmlbuilder';
import { Region } from '../Region';
import { InventoryItem } from '../InventoryItem';
import { TextureAnim } from './TextureAnim';
import { ExtraParams } from './ExtraParams';
import { PrimFlags } from '../../enums/PrimFlags';
import { PhysicsShapeType } from '../../enums/PhysicsShapeType';
import { PCode } from '../../enums/PCode';
import { SoundFlags } from '../../enums/SoundFlags';
import { DeRezDestination } from '../../enums/DeRezDestination';
import { AttachmentPoint } from '../../enums/AttachmentPoint';
import { InventoryFolder } from '../InventoryFolder';
import { Subject } from 'rxjs';
import { PermissionMask } from '../../enums/PermissionMask';
export declare class GameObject implements IGameObjectData {
    rtreeEntry?: ITreeBoundingBox;
    textureAnim: TextureAnim;
    extraParams: ExtraParams;
    deleted: boolean;
    creatorID?: UUID;
    creationDate?: Long;
    baseMask?: number;
    ownerMask?: number;
    groupMask?: number;
    groupID?: UUID;
    everyoneMask?: number;
    nextOwnerMask?: number;
    ownershipCost?: number;
    saleType?: number;
    salePrice?: number;
    aggregatePerms?: number;
    aggregatePermTextures?: number;
    aggregatePermTexturesOwner?: number;
    category: number;
    inventorySerial: number;
    itemID: UUID;
    folderID: UUID;
    fromTaskID: UUID;
    lastOwnerID: UUID;
    name?: string;
    description?: string;
    touchName?: string;
    sitName?: string;
    textureID?: string;
    resolvedAt?: number;
    resolvedInventory: boolean;
    totalChildren?: number;
    landImpact?: number;
    calculatedLandImpact?: number;
    physicaImpact?: number;
    resourceImpact?: number;
    linkResourceImpact?: number;
    linkPhysicsImpact?: number;
    limitingType?: string;
    children?: GameObject[];
    ID: number;
    FullID: UUID;
    ParentID?: number;
    OwnerID: UUID;
    IsAttachment: boolean;
    NameValue: {
        [key: string]: NameValue;
    };
    PCode: PCode;
    State?: number;
    CRC?: number;
    Material?: number;
    ClickAction?: number;
    Scale?: Vector3;
    Flags?: PrimFlags;
    PathCurve?: number;
    ProfileCurve?: number;
    PathBegin?: number;
    PathEnd?: number;
    PathScaleX?: number;
    PathScaleY?: number;
    PathShearX?: number;
    PathShearY?: number;
    PathTwist?: number;
    PathTwistBegin?: number;
    PathRadiusOffset?: number;
    PathTaperX?: number;
    PathTaperY?: number;
    PathRevolutions?: number;
    PathSkew?: number;
    ProfileBegin?: number;
    ProfileEnd?: number;
    ProfileHollow?: number;
    TextureEntry?: TextureEntry;
    Text?: string;
    TextColor?: Color4;
    MediaURL?: string;
    JointType?: number;
    JointPivot?: Vector3;
    JointAxisOrAnchor?: Vector3;
    Position?: Vector3;
    Rotation?: Quaternion;
    CollisionPlane?: Vector4;
    Velocity?: Vector3;
    Acceleration?: Vector3;
    AngularVelocity?: Vector3;
    TreeSpecies?: Tree;
    Sound?: UUID;
    SoundGain?: number;
    SoundFlags?: SoundFlags;
    SoundRadius?: number;
    Particles?: ParticleSystem;
    density?: number;
    friction?: number;
    gravityMultiplier?: number;
    physicsShapeType?: PhysicsShapeType;
    restitution?: number;
    attachmentPoint: AttachmentPoint;
    region: Region;
    inventory: InventoryItem[];
    resolveAttempts: number;
    claimedForBuild: boolean;
    createdSelected: boolean;
    isMarkedRoot: boolean;
    onTextureUpdate: Subject<void>;
    private static partFromXMLJS;
    static fromXML(xml: string | any): Promise<GameObject>;
    static deRezObjects(region: Region, objects: GameObject[], destination: DeRezDestination, transactionID: UUID, destFolder: UUID): Promise<void>;
    static takeManyToInventory(region: Region, objects: GameObject[], folder?: InventoryFolder): Promise<InventoryItem>;
    constructor();
    waitForTextureUpdate(timeout?: number): Promise<void>;
    rezScript(name: string, description: string, perms?: PermissionMask): Promise<InventoryItem>;
    updateInventory(): Promise<void>;
    private waitForTaskInventory;
    hasNameValueEntry(key: string): boolean;
    getNameValueEntry(key: string): string;
    setIfDefined(def?: number, v?: number): number;
    setShape(PathCurve?: number, ProfileCurve?: number, PathBegin?: number, PathEnd?: number, PathScaleX?: number, PathScaleY?: number, PathShearX?: number, PathShearY?: number, PathTwist?: number, PathTwistBegin?: number, PathRadiusOffset?: number, PathTaperX?: number, PathTaperY?: number, PathRevolutions?: number, PathSkew?: number, ProfileBegin?: number, ProfileEnd?: number, ProfileHollow?: number): Promise<void>;
    setName(name: string): Promise<void>;
    setGeometry(pos?: Vector3, rot?: Quaternion, scale?: Vector3, wholeLinkset?: boolean): Promise<void>;
    linkTo(rootObj: GameObject): Promise<void>;
    linkFrom(objects: GameObject[]): Promise<void>;
    setDescription(desc: string): Promise<void>;
    setTextureEntry(e: TextureEntry): Promise<void>;
    setTextureAndMediaURL(): Promise<void>;
    setExtraParams(ex: ExtraParams): Promise<void>;
    private getInventoryXML;
    private getXML;
    populateChildren(): void;
    exportXMLElement(rootNode?: string): Promise<XMLElement>;
    exportXML(rootNode?: string): Promise<string>;
    toJSON(): IGameObjectData;
    setObjectData(data: Buffer): void;
    deRezObject(destination: DeRezDestination, transactionID: UUID, destFolder: UUID): Promise<void>;
    takeToInventory(folder?: InventoryFolder): Promise<InventoryItem>;
    dropInventoryIntoContents(inventoryItem: InventoryItem | UUID): Promise<void>;
    waitForInventoryUpdate(inventorySerial?: number): Promise<void>;
    select(): Promise<void>;
    deselect(): Promise<void>;
}
