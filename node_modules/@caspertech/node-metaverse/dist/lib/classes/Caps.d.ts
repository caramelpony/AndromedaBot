/// <reference types="node" />
import { EventQueueClient } from './EventQueueClient';
import { UUID } from './UUID';
import { ClientEvents } from './ClientEvents';
import { Agent } from './Agent';
import { ICapResponse } from './interfaces/ICapResponse';
import { HTTPAssets } from '../enums/HTTPAssets';
export declare class Caps {
    static CAP_INVOCATION_DELAY_MS: {
        [key: string]: number;
    };
    private onGotSeedCap;
    private gotSeedCap;
    private capabilities;
    private clientEvents;
    private agent;
    private active;
    private timeLastCapExecuted;
    eventQueueClient: EventQueueClient | null;
    constructor(agent: Agent, seedURL: string, clientEvents: ClientEvents);
    downloadAsset(uuid: UUID, type: HTTPAssets): Promise<Buffer>;
    request(capURL: string, data: string | Buffer, contentType: string): Promise<ICapResponse>;
    requestPut(capURL: string, data: string | Buffer, contentType: string): Promise<ICapResponse>;
    requestGet(requestURL: string): Promise<ICapResponse>;
    requestDelete(requestURL: string): Promise<ICapResponse>;
    waitForSeedCapability(): Promise<void>;
    isCapAvailable(capability: string): Promise<boolean>;
    getCapability(capability: string): Promise<string>;
    capsRequestUpload(capURL: string, data: Buffer): Promise<any>;
    private waitForCapTimeout;
    capsPerformXMLPost(capURL: string, data: any): Promise<any>;
    capsPerformXMLPut(capURL: string, data: any): Promise<any>;
    capsPerformXMLGet(capURL: string): Promise<any>;
    capsGetXML(capability: string | [string, {
        [key: string]: string;
    }]): Promise<any>;
    capsPostXML(capability: string | [string, {
        [key: string]: string;
    }], data: any): Promise<any>;
    capsPutXML(capability: string | [string, {
        [key: string]: string;
    }], data: any): Promise<any>;
    shutdown(): void;
}
