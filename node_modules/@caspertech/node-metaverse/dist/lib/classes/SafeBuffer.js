"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SafeBuffer = void 0;
class SafeBuffer {
    constructor(buf) {
        this.buf = buf;
    }
    get length() {
        return this.buf.length;
    }
    static from(buf) {
        return new SafeBuffer(buf);
    }
    static allocUnsafe(size) {
        return new SafeBuffer(Buffer.allocUnsafe(size));
    }
    getByte(pos) {
        if (pos >= this.buf.length - 1) {
            return 0;
        }
        return this.buf[pos];
    }
    copy(target, targetStart, sourceStart = 0, sourceEnd = this.buf.length) {
        return this.buf.copy(target, targetStart, sourceStart, sourceEnd);
    }
    slice(start, end = this.buf.length) {
        const expectedSize = end - start;
        const newBuf = Buffer.alloc(expectedSize);
        if (start >= this.buf.length - 1) {
            return new SafeBuffer(newBuf);
        }
        if (end >= this.buf.length) {
            end = this.buf.length;
        }
        this.buf.copy(newBuf, 0, 0, end);
        return new SafeBuffer(newBuf);
    }
    readUInt8(pos) {
        if (pos >= this.buf.length - 1) {
            return 0;
        }
        return this.buf.readUInt8(pos);
    }
    readUInt16LE(pos) {
        if (pos >= this.buf.length - 2) {
            return 0;
        }
        return this.buf.readUInt16LE(pos);
    }
    readInt16LE(pos) {
        if (pos >= this.buf.length - 2) {
            return 0;
        }
        return this.buf.readInt16LE(pos);
    }
    readUInt32LE(pos) {
        if (pos >= this.buf.length - 4) {
            return 0;
        }
        return this.buf.readUInt32LE(pos);
    }
    readInt32LE(pos) {
        if (pos >= this.buf.length - 4) {
            return 0;
        }
        return this.buf.readInt32LE(pos);
    }
    readFloatLE(pos) {
        if (pos >= this.buf.length - 4) {
            return 0;
        }
        return this.buf.readFloatLE(pos);
    }
    readDoubleLE(pos) {
        if (pos >= this.buf.length - 8) {
            return 0;
        }
        return this.buf.readDoubleLE(pos);
    }
}
exports.SafeBuffer = SafeBuffer;
//# sourceMappingURL=SafeBuffer.js.map