"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoalescedGameObject = void 0;
const Vector3_1 = require("./Vector3");
const GameObject_1 = require("./public/GameObject");
const builder = require("xmlbuilder");
const Utils_1 = require("./Utils");
class CoalescedGameObject {
    static fromXML(xml) {
        return __awaiter(this, void 0, void 0, function* () {
            const obj = new CoalescedGameObject();
            const parsed = yield Utils_1.Utils.parseXML(xml);
            if (!parsed['CoalescedObject']) {
                throw new Error('CoalescedObject not found');
            }
            const result = parsed['CoalescedObject'];
            obj.size = new Vector3_1.Vector3([parseFloat(result.$.x), parseFloat(result.$.y), parseFloat(result.$.z)]);
            const sog = result['SceneObjectGroup'];
            obj.objects = [];
            for (const object of sog) {
                const toProcess = object['SceneObjectGroup'][0];
                const go = yield GameObject_1.GameObject.fromXML(toProcess);
                obj.objects.push({
                    offset: new Vector3_1.Vector3([parseFloat(object.$.offsetx), parseFloat(object.$.offsety), parseFloat(object.$.offsetz)]),
                    object: go
                });
            }
            return obj;
        });
    }
    exportXMLElement(rootNode) {
        return __awaiter(this, void 0, void 0, function* () {
            const document = builder.create('CoalescedObject');
            document.att('x', this.size.x);
            document.att('y', this.size.y);
            document.att('z', this.size.z);
            for (const obj of this.objects) {
                const ele = document.ele('SceneObjectGroup');
                ele.att('offsetx', obj.offset.x);
                ele.att('offsety', obj.offset.y);
                ele.att('offsetz', obj.offset.z);
                const child = yield obj.object.exportXMLElement(rootNode);
                ele.children.push(child);
            }
            return document;
        });
    }
    exportXML(rootNode) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.exportXMLElement(rootNode)).end({ pretty: true, allowEmpty: true });
        });
    }
}
exports.CoalescedGameObject = CoalescedGameObject;
//# sourceMappingURL=CoalescedGameObject.js.map