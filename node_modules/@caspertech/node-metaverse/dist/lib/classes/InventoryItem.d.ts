/// <reference types="node" />
import { GameObject } from '..';
import { AssetType } from '../enums/AssetType';
import { AttachmentPoint } from '../enums/AttachmentPoint';
import { InventoryItemFlags } from '../enums/InventoryItemFlags';
import { InventoryType } from '../enums/InventoryType';
import { PermissionMask } from '../enums/PermissionMask';
import { Agent } from './Agent';
import { InventoryFolder } from './InventoryFolder';
import { UUID } from './UUID';
import { Vector3 } from './Vector3';
export declare class InventoryItem {
    private container?;
    private agent?;
    assetID: UUID;
    inventoryType: InventoryType;
    name: string;
    salePrice: number;
    saleType: number;
    created: Date;
    parentID: UUID;
    flags: InventoryItemFlags;
    itemID: UUID;
    oldItemID?: UUID;
    parentPartID?: UUID;
    permsGranter?: UUID;
    description: string;
    type: AssetType;
    callbackID: number;
    permissions: {
        baseMask: PermissionMask;
        groupMask: PermissionMask;
        nextOwnerMask: PermissionMask;
        ownerMask: PermissionMask;
        everyoneMask: PermissionMask;
        lastOwner: UUID;
        owner: UUID;
        creator: UUID;
        group: UUID;
        groupOwned?: boolean;
    };
    static fromAsset(lineObj: {
        lines: string[];
        lineNum: number;
    }, container?: GameObject | InventoryFolder, agent?: Agent): InventoryItem;
    static fromXML(xml: string): Promise<InventoryItem>;
    constructor(container?: GameObject | InventoryFolder | undefined, agent?: Agent | undefined);
    toAsset(indent?: string): string;
    getCRC(): number;
    update(): Promise<void>;
    moveToFolder(targetFolder: InventoryFolder): Promise<InventoryItem>;
    delete(): Promise<void>;
    exportXML(): Promise<string>;
    detachFromAvatar(): Promise<void>;
    attachToAvatar(attachPoint: AttachmentPoint, timeout?: number): Promise<GameObject>;
    rezGroupInWorld(position: Vector3): Promise<GameObject[]>;
    rezInWorld(position: Vector3, objectScale?: Vector3): Promise<GameObject>;
    renameInTask(task: GameObject, newName: string): Promise<void>;
    updateScript(scriptAsset: Buffer): Promise<UUID>;
}
