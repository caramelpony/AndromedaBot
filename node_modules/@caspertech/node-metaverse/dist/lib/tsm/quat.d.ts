/**
 * @fileoverview TSM - A TypeScript vector and matrix math library
 * @author Matthias Ferch
 * @version 0.6
 */
import { TSMVec3 } from './vec3';
import { TSMMat3 } from './mat3';
import { TSMMat4 } from './mat4';
export declare class TSMQuat {
    static identity: TSMQuat;
    private values;
    static dot(q1: TSMQuat, q2: TSMQuat): number;
    static sum(q1: TSMQuat, q2: TSMQuat, dest?: TSMQuat | null): TSMQuat;
    static product(q1: TSMQuat, q2: TSMQuat, dest?: TSMQuat | null): TSMQuat;
    static cross(q1: TSMQuat, q2: TSMQuat, dest?: TSMQuat | null): TSMQuat;
    static shortMix(q1: TSMQuat, q2: TSMQuat, time: number, dest?: TSMQuat | null): TSMQuat;
    static mix(q1: TSMQuat, q2: TSMQuat, time: number, dest?: TSMQuat | null): TSMQuat;
    static fromAxis(axis: TSMVec3, angle: number, dest?: TSMQuat | null): TSMQuat;
    get x(): number;
    get y(): number;
    get z(): number;
    get w(): number;
    get xy(): number[];
    get xyz(): number[];
    get xyzw(): number[];
    set x(value: number);
    set y(value: number);
    set z(value: number);
    set w(value: number);
    set xy(values: number[]);
    set xyz(values: number[]);
    set xyzw(values: number[]);
    constructor(values?: number[] | null);
    at(index: number): number;
    reset(): void;
    copy(dest?: TSMQuat | null): TSMQuat;
    roll(): number;
    pitch(): number;
    yaw(): number;
    equals(vector: TSMQuat, threshold?: number): boolean;
    setIdentity(): TSMQuat;
    calculateW(): TSMQuat;
    inverse(): TSMQuat;
    conjugate(): TSMQuat;
    length(): number;
    normalize(dest?: TSMQuat | null): TSMQuat;
    add(other: TSMQuat): TSMQuat;
    multiply(other: TSMQuat): TSMQuat;
    multiplyTSMVec3(vector: TSMVec3, dest?: TSMVec3 | null): TSMVec3;
    toTSMMat3(dest?: TSMMat3 | null): TSMMat3;
    toTSMMat4(dest?: TSMMat4 | null): TSMMat4;
}
