/**
 * @fileoverview TSM - A TypeScript vector and matrix math library
 * @author Matthias Ferch
 * @version 0.6
 */
import { TSMMat3 } from './mat3';
import { TSMVec3 } from './vec3';
import { TSMVec4 } from './vec4';
export declare class TSMMat4 {
    static identity: TSMMat4;
    private values;
    static frustum(left: number, right: number, bottom: number, top: number, near: number, far: number): TSMMat4;
    static perspective(fov: number, aspect: number, near: number, far: number): TSMMat4;
    static orthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): TSMMat4;
    static lookAt(position: TSMVec3, target: TSMVec3, up?: TSMVec3): TSMMat4;
    static product(m1: TSMMat4, m2: TSMMat4, result?: TSMMat4 | null): TSMMat4;
    constructor(values?: number[] | null);
    at(index: number): number;
    init(values: number[]): TSMMat4;
    reset(): void;
    copy(dest?: TSMMat4 | null): TSMMat4;
    all(): number[];
    row(index: number): number[];
    col(index: number): number[];
    equals(matrix: TSMMat4, threshold?: number): boolean;
    determinant(): number;
    setIdentity(): TSMMat4;
    transpose(): TSMMat4 | null;
    inverse(): TSMMat4 | null;
    multiply(matrix: TSMMat4): TSMMat4;
    multiplyTSMVec3(vector: TSMVec3): TSMVec3;
    multiplyTSMVec4(vector: TSMVec4, dest?: TSMVec4 | null): TSMVec4;
    toTSMMat3(): TSMMat3;
    toInverseTSMMat3(): TSMMat3 | null;
    translate(vector: TSMVec3): TSMMat4;
    scale(vector: TSMVec3): TSMMat4;
    rotate(angle: number, axis: TSMVec3): TSMMat4 | null;
    toArray(): number[];
}
