/**
 * @fileoverview TSM - A TypeScript vector and matrix math library
 * @author Matthias Ferch
 * @version 0.6
 */
/// <reference path="common.d.ts" />
import { TSMMat4 } from './mat4';
export declare class TSMVec4 {
    static zero: TSMVec4;
    private values;
    static mix(vector: TSMVec4, vector2: TSMVec4, time: number, dest?: TSMVec4 | null): TSMVec4;
    static sum(vector: TSMVec4, vector2: TSMVec4, dest?: TSMVec4 | null): TSMVec4;
    static difference(vector: TSMVec4, vector2: TSMVec4, dest?: TSMVec4 | null): TSMVec4;
    static product(vector: TSMVec4, vector2: TSMVec4, dest?: TSMVec4 | null): TSMVec4;
    static quotient(vector: TSMVec4, vector2: TSMVec4, dest?: TSMVec4 | null): TSMVec4;
    get x(): number;
    get y(): number;
    get z(): number;
    get w(): number;
    get xy(): number[];
    get xyz(): number[];
    get xyzw(): number[];
    set x(value: number);
    set y(value: number);
    set z(value: number);
    set w(value: number);
    set xy(values: number[]);
    set xyz(values: number[]);
    set xyzw(values: number[]);
    get r(): number;
    get g(): number;
    get b(): number;
    get a(): number;
    get rg(): number[];
    get rgb(): number[];
    get rgba(): number[];
    set r(value: number);
    set g(value: number);
    set b(value: number);
    set a(value: number);
    set rg(values: number[]);
    set rgb(values: number[]);
    set rgba(values: number[]);
    constructor(values?: number[] | null);
    at(index: number): number;
    reset(): void;
    copy(dest?: TSMVec4 | null): TSMVec4;
    negate(dest?: TSMVec4 | null): TSMVec4;
    equals(vector: TSMVec4, threshold?: number): boolean;
    length(): number;
    squaredLength(): number;
    add(vector: TSMVec4): TSMVec4;
    subtract(vector: TSMVec4): TSMVec4;
    multiply(vector: TSMVec4): TSMVec4;
    divide(vector: TSMVec4): TSMVec4;
    scale(value: number, dest?: TSMVec4 | null): TSMVec4;
    normalize(dest?: TSMVec4 | null): TSMVec4;
    multiplyTSMMat4(matrix: TSMMat4, dest?: TSMVec4 | null): TSMVec4;
}
