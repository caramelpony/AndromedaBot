import { TSMVec3 } from './vec3';
import { TSMMat2 } from './mat2';
import { TSMMat3 } from './mat3';
export declare class TSMVec2 {
    static zero: TSMVec2;
    private values;
    static cross(vector: TSMVec2, vector2: TSMVec2, dest?: TSMVec3 | null): TSMVec3;
    static dot(vector: TSMVec2, vector2: TSMVec2): number;
    static distance(vector: TSMVec2, vector2: TSMVec2): number;
    static squaredDistance(vector: TSMVec2, vector2: TSMVec2): number;
    static direction(vector: TSMVec2, vector2: TSMVec2, dest?: TSMVec2 | null): TSMVec2;
    static mix(vector: TSMVec2, vector2: TSMVec2, time: number, dest?: TSMVec2 | null): TSMVec2;
    static sum(vector: TSMVec2, vector2: TSMVec2, dest?: TSMVec2 | null): TSMVec2;
    static difference(vector: TSMVec2, vector2: TSMVec2, dest?: TSMVec2 | null): TSMVec2;
    static product(vector: TSMVec2, vector2: TSMVec2, dest?: TSMVec2 | null): TSMVec2;
    static quotient(vector: TSMVec2, vector2: TSMVec2, dest?: TSMVec2 | null): TSMVec2;
    get x(): number;
    get y(): number;
    get xy(): number[];
    set x(value: number);
    set y(value: number);
    set xy(values: number[]);
    constructor(values?: number[] | null);
    at(index: number): number;
    reset(): void;
    copy(dest?: TSMVec2 | null): TSMVec2;
    negate(dest?: TSMVec2 | null): TSMVec2;
    equals(vector: TSMVec2, threshold?: number): boolean;
    length(): number;
    squaredLength(): number;
    add(vector: TSMVec2): TSMVec2;
    subtract(vector: TSMVec2): TSMVec2;
    multiply(vector: TSMVec2): TSMVec2;
    divide(vector: TSMVec2): TSMVec2;
    scale(value: number, dest?: TSMVec2 | null): TSMVec2;
    normalize(dest?: TSMVec2 | null): TSMVec2;
    multiplyTSMMat2(matrix: TSMMat2, dest?: TSMVec2 | null): TSMVec2;
    multiplyTSMMat3(matrix: TSMMat3, dest?: TSMVec2 | null): TSMVec2;
}
