"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExampleBot_1 = require("../ExampleBot");
class Friends extends ExampleBot_1.ExampleBot {
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bot.clientEvents.onFriendRequest.subscribe(this.onFriendRequest.bind(this));
            this.bot.clientEvents.onFriendResponse.subscribe(this.onFriendResponse.bind(this));
            this.bot.clientCommands.friends.sendFriendRequest(this.masterAvatar, 'Be friends with me?').then(() => {
            });
            try {
                // Get map location of the master avatar. Will fail if you don't have map rights
                const regionLocation = yield this.bot.clientCommands.friends.getFriendMapLocation(this.masterAvatar);
                console.log('Master is in ' + regionLocation.regionName + ' at <' + regionLocation.localX + ', ' + regionLocation.localY + '> and there are ' + regionLocation.avatars.length + ' other avatars there too! You stalker!');
            }
            catch (error) {
                console.log('Map location request failed. The bot probably does not have map rights on the master avatar, or they are offline.');
            }
        });
    }
    onFriendRequest(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (event.from.toString() === this.masterAvatar) {
                console.log('Accepting friend request from ' + event.fromName);
                this.bot.clientCommands.friends.acceptFriendRequest(event).then(() => {
                });
            }
            else {
                console.log('Rejecting friend request from ' + event.fromName);
                this.bot.clientCommands.friends.rejectFriendRequest(event).then(() => {
                });
            }
        });
    }
    onFriendResponse(response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (response.accepted) {
                console.log(response.fromName + ' accepted your friend request');
            }
            else {
                console.log(response.fromName + ' declined your friend request');
            }
        });
    }
}
new Friends().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Friends.js.map