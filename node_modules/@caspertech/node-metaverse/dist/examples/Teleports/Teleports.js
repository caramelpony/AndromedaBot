"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const ExampleBot_1 = require("../ExampleBot");
class Teleports extends ExampleBot_1.ExampleBot {
    constructor() {
        super(...arguments);
        // We can make the bot always try to get to a certain region regardless of where it logged in
        this.stayRegion = 'Izanagi';
        // And we can optionally specify a position
        this.stayPosition = new lib_1.Vector3([122, 156, 189]);
    }
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            // "OnLure" event fires when someone tries to teleport us
            this.bot.clientEvents.onLure.subscribe(this.onLure.bind(this));
            // Alternatively we can TP someone else to us
            yield this.bot.clientCommands.comms.sendTeleport(this.masterAvatar);
        });
    }
    onLure(lureEvent) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const regionInfo = yield this.bot.clientCommands.grid.getRegionMapInfo(lureEvent.gridX / 256, lureEvent.gridY / 256);
                if (lureEvent.from.toString() === this.masterAvatar) {
                    console.log('Accepting teleport lure to ' + regionInfo.block.name + ' (' + regionInfo.avatars.length + ' avatar' + ((regionInfo.avatars.length === 1) ? '' : 's') + '' +
                        ' present) from ' + lureEvent.fromName + ' with message: ' + lureEvent.lureMessage);
                    try {
                        yield this.bot.clientCommands.teleport.acceptTeleport(lureEvent);
                    }
                    catch (error) {
                        console.error('Teleport error:');
                        console.error(error);
                    }
                }
                else {
                    console.log('Ignoring teleport lure to ' + regionInfo.block.name + ' (' + regionInfo.avatars.length + ' avatar' + ((regionInfo.avatars.length === 1) ? '' : 's') + ' ' +
                        'present) from ' + lureEvent.fromName + ' with message: ' + lureEvent.lureMessage);
                }
            }
            catch (error) {
                console.error('Failed to get region map info:');
                console.error(error);
            }
        });
    }
}
new Teleports().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Teleports.js.map