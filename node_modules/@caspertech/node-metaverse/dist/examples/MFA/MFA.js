"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../../lib/classes/Logger");
const LoginError_1 = require("../../lib/classes/LoginError");
const ExampleBot_1 = require("../ExampleBot");
const readline = require("readline");
const fs = require("fs");
class MFA extends ExampleBot_1.ExampleBot {
    login() {
        const _super = Object.create(null, {
            login: { get: () => super.login }
        });
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield _super.login.call(this);
            }
            catch (e) {
                if (e instanceof LoginError_1.LoginError) {
                    if (e.reason === 'mfa_challenge') {
                        const rl = readline.createInterface({
                            input: process.stdin,
                            output: process.stdout
                        });
                        rl.question('Please enter authenticator code for ' + String(this.firstName) + ' ' + String(this.lastName) + '\n# ', (code) => {
                            this.bot.loginParameters.token = code;
                            void this.login();
                        });
                        return;
                    }
                }
                Logger_1.Logger.Error(e);
            }
        });
    }
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.loginResponse && this.loginResponse.mfaHash) {
                // Store MFA hash in our login credentials for next time
                this.loginParameters.mfa_hash = this.loginResponse.mfaHash;
                delete this.loginParameters.token;
                yield fs.promises.writeFile(this.loginParamsJsonFile, JSON.stringify(this.loginParameters, null, 4));
            }
        });
    }
}
new MFA().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=MFA.js.map