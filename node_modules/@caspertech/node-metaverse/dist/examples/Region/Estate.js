"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExampleBot_1 = require("../ExampleBot");
class Estate extends ExampleBot_1.ExampleBot {
    wait(ms) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, ms);
        });
    }
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Sending a message');
            yield this.bot.clientCommands.region.simulatorMessage('In about 10 seconds, the region will begin to restart. This is only a test, and the restart will be cancelled.');
            yield this.wait(10000);
            console.log('Restarting');
            yield this.bot.clientCommands.region.restartRegion(120);
            yield this.wait(10000);
            console.log('Canceling restart');
            yield this.bot.clientCommands.region.cancelRestart();
        });
    }
}
new Estate().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Estate.js.map