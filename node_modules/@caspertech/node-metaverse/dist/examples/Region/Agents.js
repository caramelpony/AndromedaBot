"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExampleBot_1 = require("../ExampleBot");
class Region extends ExampleBot_1.ExampleBot {
    constructor() {
        super(...arguments);
        this.subscriptions = {};
    }
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bot.clientEvents.onAvatarEnteredRegion.subscribe(this.onAvatarEntered.bind(this));
            const avs = this.bot.clientCommands.region.getAvatarsInRegion();
            for (const av of avs) {
                this.onAvatarEntered(av);
            }
        });
    }
    onAvatarEntered(av) {
        console.log(av.getName() + ' entered the region (' + ((av.isVisible) ? 'visible' : 'invisible') + ')');
        const avatarKey = av.getKey().toString();
        this.unsubscribe(avatarKey);
        this.subscriptions[avatarKey] = {
            onLeftRegionSubscription: av.onLeftRegion.subscribe(this.onAvatarLeft.bind(this)),
            onMovedSubscription: av.onMoved.subscribe(this.onAvatarMoved.bind(this)),
            onTitleSubscription: av.onTitleChanged.subscribe(this.onTitleChanged.bind(this)),
            onVisibleSubscription: av.onVisibleChanged.subscribe(this.onAvatarVisible.bind(this))
        };
    }
    unsubscribe(key) {
        const sub = this.subscriptions[key];
        if (sub === undefined) {
            return;
        }
        delete this.subscriptions[key];
        sub.onVisibleSubscription.unsubscribe();
        sub.onMovedSubscription.unsubscribe();
        sub.onTitleSubscription.unsubscribe();
        sub.onLeftRegionSubscription.unsubscribe();
    }
    onAvatarLeft(av) {
        console.log(av.getName() + ' left the region');
        this.unsubscribe(av.getKey().toString());
    }
    onAvatarMoved(av) {
        console.log(av.getName() + ' moved, position: ' + av.position.toString());
    }
    onTitleChanged(av) {
        console.log(av.getName() + ' changed their title to: ' + av.getTitle());
    }
    onAvatarVisible(av) {
        console.log(av.getName() + ' is now ' + (av.isVisible ? 'visible' : 'invisible'));
    }
}
new Region().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Agents.js.map