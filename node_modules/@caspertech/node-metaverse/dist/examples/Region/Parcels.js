"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExampleBot_1 = require("../ExampleBot");
const LandStatReportType_1 = require("../../lib/enums/LandStatReportType");
const LandStatFlags_1 = require("../../lib/enums/LandStatFlags");
class Parcels extends ExampleBot_1.ExampleBot {
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            const parcelInMiddle = yield this.bot.clientCommands.region.getParcelAt(128, 128);
            console.log('Parcel at 128x128 is ' + parcelInMiddle.Name);
            const parcels = yield this.bot.clientCommands.region.getParcels();
            console.log('Parcels on region:');
            console.log('========================');
            for (const p of parcels) {
                console.log(p.Name);
            }
            console.log('========================');
            const stats = yield this.bot.clientCommands.parcel.getLandStats(parcels[0].ParcelID, LandStatReportType_1.LandStatReportType.Scripts, LandStatFlags_1.LandStatFlags.FilterByOwner);
            console.log(JSON.stringify(stats, null, 4));
        });
    }
}
new Parcels().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Parcels.js.map