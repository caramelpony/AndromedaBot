"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExampleBot_1 = require("../ExampleBot");
const MoneyTransactionType_1 = require("../../lib/enums/MoneyTransactionType");
class Money extends ExampleBot_1.ExampleBot {
    constructor() {
        super(...arguments);
        this.balance = 0;
    }
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bot.clientEvents.onBalanceUpdated.subscribe(this.onBalanceUpdated.bind(this));
            try {
                this.balance = yield this.bot.clientCommands.grid.getBalance();
                console.log('Balance is L$' + this.balance);
                yield this.bot.clientCommands.grid.payAvatar('d1cd5b71-6209-4595-9bf0-771bf689ce00', 1, 'This is a gift for being so awesome!');
                console.log('Payment success');
            }
            catch (error) {
                console.log('Payment failed');
            }
        });
    }
    onBalanceUpdated(evt) {
        return __awaiter(this, void 0, void 0, function* () {
            this.balance = evt.balance;
            if (evt.transaction.from.equals(this.bot.agentID())) {
                if (evt.transaction.toGroup) {
                    console.log('You paid a group L$' + evt.transaction.amount);
                }
                else {
                    const result = yield this.bot.clientCommands.grid.avatarKey2Name(evt.transaction.to);
                    console.log('You paid L$' + evt.transaction.amount + ' to ' + result.getName() + ' "' + evt.transaction.description + '" (' + MoneyTransactionType_1.MoneyTransactionType[evt.transaction.type] + ')');
                }
            }
            else {
                if (evt.transaction.fromGroup) {
                    console.log('A group paid you L$' + evt.transaction.amount);
                }
                else {
                    const result = yield this.bot.clientCommands.grid.avatarKey2Name(evt.transaction.from);
                    console.log(result.getName() + ' paid you L$' + evt.transaction.amount + ' "' + evt.transaction.description + '" (' + MoneyTransactionType_1.MoneyTransactionType[evt.transaction.type] + ')');
                }
            }
            console.log('Balance updated (New balance L$' + evt.balance + ')');
        });
    }
}
new Money().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Money.js.map