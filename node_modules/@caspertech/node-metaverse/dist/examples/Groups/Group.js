"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExampleBot_1 = require("../ExampleBot");
const UUID_1 = require("../../lib/classes/UUID");
class Group extends ExampleBot_1.ExampleBot {
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bot.clientEvents.onGroupNotice.subscribe(this.onGroupNotice.bind(this));
            // Group invite example
            // Just omit the role parameter for "everyone" role
            //
            // bot.clientCommands.group.sendGroupInvite("c6424e05-6e2c-fb03-220b-ca7904d11e04", "d1cd5b71-6209-4595-9bf0-771bf689ce00");
            // Advanced group invite example
            //
            const userToInvite = new UUID_1.UUID('d1cd5b71-6209-4595-9bf0-771bf689ce00');
            const groupID = new UUID_1.UUID('4b35083d-b51a-a148-c400-6f1038a5589e');
            // Retrieve group roles
            const roles = yield this.bot.clientCommands.group.getGroupRoles(groupID);
            for (const role of roles) {
                if (role.Name === 'Officers') {
                    // IMPORTANT: IN PRODUCTION, IT IS HIGHLY RECOMMENDED TO CACHE THIS LIST.
                    //
                    try {
                        const members = yield this.bot.clientCommands.group.getMemberList(groupID);
                        let found = true;
                        for (const member of members) {
                            if (member.AgentID.toString() === userToInvite.toString()) {
                                found = true;
                            }
                        }
                        if (found) {
                            console.log('User already in group, skipping invite');
                        }
                        else {
                            this.bot.clientCommands.group.sendGroupInvite(groupID, userToInvite, role.RoleID).then(() => {
                            });
                        }
                    }
                    catch (error) {
                        console.error('Error retrieving member list for group invite');
                    }
                }
            }
            // Get group member list
            try {
                const memberList = yield this.bot.clientCommands.group.getMemberList(groupID);
                console.log(memberList.length + ' members in member list');
            }
            catch (error) {
                // Probably access denied
                console.error(error);
            }
            // Get group ban list
            try {
                const banList = yield this.bot.clientCommands.group.getBanList(groupID);
                console.log(banList.length + ' members in ban list');
            }
            catch (error) {
                // Probably access denied
                console.error(error);
            }
        });
    }
    onGroupNotice(event) {
        return __awaiter(this, void 0, void 0, function* () {
            // Get group name
            const groupProfile = yield this.bot.clientCommands.group.getGroupProfile(event.groupID);
            console.log('Group notice from ' + event.fromName + ' (' + event.from + '), from group ' + groupProfile.Name + ' (' + event.groupID + ')');
            console.log('Subject: ' + event.subject);
            console.log('Message: ' + event.message);
        });
    }
}
new Group().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Group.js.map