"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExampleBot_1 = require("../ExampleBot");
const FolderType_1 = require("../../lib/enums/FolderType");
const LLLindenText_1 = require("../../lib/classes/LLLindenText");
const AssetType_1 = require("../../lib/enums/AssetType");
const InventoryType_1 = require("../../lib/enums/InventoryType");
const PermissionMask_1 = require("../../lib/enums/PermissionMask");
class Inventory extends ExampleBot_1.ExampleBot {
    onConnected() {
        return __awaiter(this, void 0, void 0, function* () {
            this.bot.clientEvents.onInventoryOffered.subscribe(this.onInventoryOffered.bind(this));
            this.bot.clientEvents.onInventoryResponse.subscribe(this.onInventoryResponse.bind(this));
            // Get the root inventory folder
            const rootFolder = this.bot.clientCommands.inventory.getInventoryRoot();
            // Populate the root folder
            yield rootFolder.populate(false);
            const exampleFolderName = 'node-metaverse example';
            const exampleNotecardName = 'Example Notecard';
            const exampleScriptName = 'Example script';
            let exampleFolder = undefined;
            for (const childFolder of rootFolder.folders) {
                if (childFolder.name === exampleFolderName) {
                    exampleFolder = childFolder;
                    yield exampleFolder.populate(false);
                    break;
                }
            }
            // Our folder doesnt' seem to exist, so create it
            if (exampleFolder === undefined) {
                exampleFolder = yield rootFolder.createFolder(exampleFolderName, FolderType_1.FolderType.None);
            }
            // See if we've already made our test notecard to avoid clutter..
            let exampleNotecard = undefined;
            for (const childItem of exampleFolder.items) {
                if (childItem.name === exampleNotecardName) {
                    exampleNotecard = childItem;
                    break;
                }
            }
            // Create the notecard
            if (exampleNotecard === undefined) {
                const notecard = new LLLindenText_1.LLLindenText();
                notecard.body = 'This is a notecard I made all by myself at ' + new Date().toString();
                exampleNotecard = yield exampleFolder.uploadAsset(AssetType_1.AssetType.Notecard, InventoryType_1.InventoryType.Notecard, notecard.toAsset(), exampleNotecardName, 'This is an example notecard');
            }
            // Set notecard to transfer only
            exampleNotecard.permissions.nextOwnerMask = PermissionMask_1.PermissionMask.Transfer | PermissionMask_1.PermissionMask.Modify;
            yield exampleNotecard.update();
            let exampleScript = exampleFolder.items.find(f => f.name === exampleScriptName);
            if (exampleScript === undefined) {
                exampleScript = yield exampleFolder.uploadAsset(AssetType_1.AssetType.LSLText, InventoryType_1.InventoryType.LSL, Buffer.from('default { touch_start(integer total_number) {  llSay(0, "Hello, world!"); } } ', 'utf-8'), 'Script', '');
            }
            // Give the notecard to our owner
            yield this.bot.clientCommands.comms.giveInventory(this.masterAvatar, exampleNotecard);
            // Enumerate library
            const folders = this.bot.clientCommands.inventory.getLibraryRoot().getChildFolders();
            for (const folder of folders) {
                yield this.iterateFolder(folder, '[ROOT]');
            }
            console.log('Done iterating through library');
        });
    }
    onInventoryResponse(response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (response.accepted) {
                console.log(response.fromName + ' accepted your inventory offer');
            }
            else {
                console.log(response.fromName + ' declined your inventory offer');
            }
        });
    }
    iterateFolder(folder, prefix) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(prefix + ' [' + folder.name + ']');
            yield folder.populate(false);
            for (const subFolder of folder.folders) {
                yield this.iterateFolder(subFolder, prefix + ' [' + folder.name + ']');
            }
            for (const item of folder.items) {
                console.log(prefix + ' [' + folder.name + ']' + ': ' + item.name);
                if (item.name === 'anim SMOOTH') {
                    // Send this to our master av
                }
            }
        });
    }
    onInventoryOffered(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (event.from.toString() === this.masterAvatar) {
                console.log('Accepting inventory offer from ' + event.fromName);
                this.bot.clientCommands.inventory.acceptInventoryOffer(event).then(() => {
                });
            }
            else {
                console.log('Rejecting inventory offer from ' + event.fromName);
                this.bot.clientCommands.inventory.rejectInventoryOffer(event).then(() => {
                });
            }
        });
    }
}
new Inventory().run().then(() => {
}).catch((err) => {
    console.error(err);
});
//# sourceMappingURL=Inventory.js.map